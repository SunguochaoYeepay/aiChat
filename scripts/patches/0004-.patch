From 5222809dbafb9a43c332e3dae9d05c1d4803a24a Mon Sep 17 00:00:00 2001
From: Design Helper Developer <user@example.com>
Date: Sun, 4 May 2025 23:15:12 +0800
Subject: [PATCH 4/9] =?UTF-8?q?=E5=AE=8C=E5=96=84=E6=8E=A5=E5=8F=A3=20?=
 =?UTF-8?q?=E6=B5=8B=E8=AF=95=E7=94=A8=E4=BE=8B?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 README.md                                  |  96 ++++++++-
 scripts/test_scripts/run_all_tests.bat     |  65 ++++++
 scripts/test_scripts/test_analyze_api.py   | 119 ++++++++++
 scripts/test_scripts/test_model_status.py  |  74 +++++++
 scripts/test_scripts/test_requirements.txt |   3 +
 scripts/test_scripts/test_search_api.py    |   2 +
 scripts/test_scripts/test_websocket.py     | 239 +++++++++++++++++++++
 7 files changed, 587 insertions(+), 11 deletions(-)
 create mode 100644 scripts/test_scripts/run_all_tests.bat
 create mode 100644 scripts/test_scripts/test_analyze_api.py
 create mode 100644 scripts/test_scripts/test_model_status.py
 create mode 100644 scripts/test_scripts/test_requirements.txt
 create mode 100644 scripts/test_scripts/test_search_api.py
 create mode 100644 scripts/test_scripts/test_websocket.py

diff --git a/README.md b/README.md
index 752cc0a..09a5345 100644
--- a/README.md
+++ b/README.md
@@ -400,19 +400,40 @@ design-helper/
 }
 ```
 
-## 测试脚本
+## 测试指南
 
-项目包含多个测试脚本，可用于验证系统功能：
+系统提供了完整的测试用例，覆盖所有API接口：
 
-- `scripts/test_scripts/test_model_loading.py` - 测试模型加载
-- `scripts/test_scripts/test_chat_api.py` - 测试聊天API
-- `scripts/test_scripts/run_complete_test.py` - 运行完整测试
+1. **运行完整测试**
+   ```bash
+   # 运行所有测试，包括聊天、图像分析和WebSocket测试
+   scripts\test_scripts\run_all_tests.bat
+   ```
 
-运行测试示例：
-```
-cd design-helper
-chat_env\Scripts\python.exe scripts\test_scripts\test_chat_api.py
-```
+2. **运行单项测试**
+   ```bash
+   # 测试聊天API
+   python scripts/test_scripts/test_chat_api.py
+   
+   # 测试图像分析API
+   python scripts/test_scripts/test_analyze_api.py
+   
+   # 测试WebSocket接口
+   python scripts/test_scripts/test_websocket.py
+   ```
+
+3. **安装测试依赖**
+   ```bash
+   pip install -r scripts/test_scripts/test_requirements.txt
+   ```
+
+测试用例详情:
+- `test_chat_api.py`: 测试聊天完成API (`/api/v1/chat/completions`)
+- `test_analyze_api.py`: 测试图像分析API (`/api/analyze`)
+- `test_websocket.py`: 测试WebSocket接口 (`ws://server/ws/chat/` 和 `ws://server/ws/analyze/`)
+- `check_model_status.py`: 检查模型加载状态
+
+测试结果会以日志形式输出，并通过退出码指示测试成功与否（0表示成功，非0表示失败）。
 
 ## 常见问题
 
@@ -483,4 +504,57 @@ chat_env\Scripts\python.exe scripts\test_scripts\test_chat_api.py
 1. 实现更健壮的模型加载机制
 2. 添加模型加载进度反馈
 3. 优化内存使用
-4. 增加更完善的监控和自我恢复机制 
\ No newline at end of file
+4. 增加更完善的监控和自我恢复机制 
+
+## API接口文档
+
+系统提供以下对外服务接口：
+
+### HTTP接口
+
+| 接口路径 | 方法 | 描述 |
+|---------|------|------|
+| `/api/analyze` | POST | 图像分析接口，接收图像和查询文本，返回分析结果 |
+| `/api/v1/chat/completions` | POST | 聊天完成接口，兼容OpenAI格式，支持流式响应 |
+| `/api/search` | POST | 知识库搜索接口，根据查询文本返回相关知识条目 |
+| `/api/status` | GET | 服务状态接口，返回系统和模型的当前状态 |
+
+### WebSocket接口
+
+系统还提供以下WebSocket接口，用于实时通信：
+
+| 接口 | 描述 |
+|------|------|
+| `ws://服务器地址/ws/chat/` | 聊天WebSocket接口，支持实时对话 |
+| `ws://服务器地址/ws/analyze/` | 图像分析WebSocket接口，支持实时图像分析 |
+
+### 接口使用示例
+
+#### 图像分析接口
+```json
+// POST /api/analyze
+{
+  "image_base64": "图像的base64编码",
+  "query": "关于图像的问题"
+}
+```
+
+#### 聊天完成接口
+```json
+// POST /api/v1/chat/completions
+{
+  "messages": [
+    {"role": "user", "content": "用户问题"}
+  ],
+  "stream": false
+}
+```
+
+#### 知识库搜索接口
+```json
+// POST /api/search
+{
+  "query": "搜索关键词",
+  "top_k": 5
+}
+``` 
\ No newline at end of file
diff --git a/scripts/test_scripts/run_all_tests.bat b/scripts/test_scripts/run_all_tests.bat
new file mode 100644
index 0000000..9a1bc7d
--- /dev/null
+++ b/scripts/test_scripts/run_all_tests.bat
@@ -0,0 +1,65 @@
+@echo off
+echo 启动完整测试流程...
+
+REM 切换到项目根目录
+cd ..\..\
+
+REM 激活虚拟环境
+call chat_env\Scripts\activate.bat
+
+REM 启动服务并等待
+start "服务器进程" python scripts/startup/load_model_and_run_django.py
+
+REM 等待服务启动
+echo 等待服务启动...
+timeout /t 20 /nobreak
+
+REM 测试服务状态API
+echo 测试服务状态API...
+python scripts/test_scripts/check_model_status.py
+if %ERRORLEVEL% NEQ 0 (
+    echo 服务状态检查失败，可能模型未加载或服务未启动
+    goto end
+)
+
+REM 测试聊天API
+echo 测试聊天API...
+python scripts/test_scripts/test_chat_api.py
+set chat_result=%ERRORLEVEL%
+
+REM 测试图像分析API
+echo 测试图像分析API...
+python scripts/test_scripts/test_analyze_api.py
+set analyze_result=%ERRORLEVEL%
+
+REM 测试WebSocket接口
+echo 测试WebSocket接口...
+python scripts/test_scripts/test_websocket.py
+set websocket_result=%ERRORLEVEL%
+
+REM 汇总测试结果
+echo.
+echo 测试结果汇总:
+echo ==========================================
+if %chat_result% EQU 0 (
+    echo 聊天API测试: 成功
+) else (
+    echo 聊天API测试: 失败
+)
+
+if %analyze_result% EQU 0 (
+    echo 图像分析API测试: 成功
+) else (
+    echo 图像分析API测试: 失败
+)
+
+if %websocket_result% EQU 0 (
+    echo WebSocket接口测试: 成功
+) else (
+    echo WebSocket接口测试: 失败
+)
+echo ==========================================
+
+:end
+REM 保持窗口打开
+pause 
\ No newline at end of file
diff --git a/scripts/test_scripts/test_analyze_api.py b/scripts/test_scripts/test_analyze_api.py
new file mode 100644
index 0000000..a35afa5
--- /dev/null
+++ b/scripts/test_scripts/test_analyze_api.py
@@ -0,0 +1,119 @@
+"""
+图像分析API测试模块
+
+此模块包含图像分析API接口的测试用例。
+"""
+import requests
+import json
+import time
+import sys
+import base64
+import logging
+from pathlib import Path
+
+# 设置日志
+logging.basicConfig(
+    level=logging.INFO,
+    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
+)
+logger = logging.getLogger(__name__)
+
+def test_analyze_api(base_url="http://localhost:8000", max_retries=3, retry_delay=5):
+    """
+    测试图像分析API
+    
+    Args:
+        base_url: API基础URL
+        max_retries: 最大重试次数
+        retry_delay: 重试间隔(秒)
+    """
+    # 组合完整URL
+    url = f"{base_url}/api/analyze"
+    
+    # 生成一个简单的1x1像素测试图像的base64编码
+    # 这是一个红色像素的编码
+    test_image_base64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
+    
+    # 准备请求数据
+    data = {
+        "image_base64": test_image_base64,
+        "query": "这是什么图片?"
+    }
+    
+    logger.info(f"正在测试图像分析API: {url}")
+    
+    # 先检查服务状态
+    try:
+        status_url = f"{base_url}/api/status"
+        logger.info(f"检查服务状态: {status_url}")
+        status_response = requests.get(status_url)
+        
+        if status_response.status_code == 200:
+            status_data = status_response.json()
+            logger.info(f"服务状态: {json.dumps(status_data, ensure_ascii=False)}")
+            
+            # 如果模型未加载，警告用户
+            if not status_data.get('model_loaded', False):
+                logger.warning("模型未加载，API调用可能会失败")
+        else:
+            logger.warning(f"获取服务状态失败: {status_response.status_code}")
+    except Exception as e:
+        logger.exception(f"检查服务状态时出错: {str(e)}")
+    
+    # 重试机制
+    for attempt in range(max_retries):
+        try:
+            logger.info(f"尝试 #{attempt+1}/{max_retries}")
+            
+            # 发送POST请求
+            start_time = time.time()
+            response = requests.post(url, json=data, timeout=60)  # 增加超时时间
+            end_time = time.time()
+            
+            # 打印响应时间
+            logger.info(f"响应时间: {end_time - start_time:.2f}秒")
+            
+            # 检查响应状态
+            if response.status_code == 200:
+                # 尝试解析JSON响应
+                try:
+                    result = response.json()
+                    logger.info(f"响应状态码: {response.status_code}")
+                    
+                    # 验证关键字段是否存在
+                    if "result" in result:
+                        logger.info(f"分析结果: {result['result']}")
+                        logger.info("测试成功！")
+                        return True
+                    else:
+                        logger.warning(f"响应中缺少'result'字段: {result}")
+                
+                except json.JSONDecodeError:
+                    logger.error(f"无法解析JSON响应: {response.text}")
+            else:
+                logger.error(f"请求失败，状态码: {response.status_code}")
+                logger.error(f"响应内容: {response.text}")
+            
+            # 如果还有重试机会，等待后重试
+            if attempt < max_retries - 1:
+                logger.info(f"等待 {retry_delay} 秒后重试...")
+                time.sleep(retry_delay)
+        
+        except requests.RequestException as e:
+            logger.exception(f"请求异常: {str(e)}")
+            
+            # 如果还有重试机会，等待后重试
+            if attempt < max_retries - 1:
+                logger.info(f"等待 {retry_delay} 秒后重试...")
+                time.sleep(retry_delay)
+    
+    logger.error("所有重试均失败")
+    return False
+
+if __name__ == "__main__":
+    # 从命令行参数获取URL或使用默认值
+    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8000"
+    success = test_analyze_api(base_url)
+    
+    # 设置退出码
+    sys.exit(0 if success else 1) 
\ No newline at end of file
diff --git a/scripts/test_scripts/test_model_status.py b/scripts/test_scripts/test_model_status.py
new file mode 100644
index 0000000..5064599
--- /dev/null
+++ b/scripts/test_scripts/test_model_status.py
@@ -0,0 +1,74 @@
+"""
+测试模型状态API
+"""
+import requests
+import json
+import sys
+import logging
+
+# 设置日志
+logging.basicConfig(
+    level=logging.INFO,
+    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
+)
+logger = logging.getLogger(__name__)
+
+def test_model_status(base_url="http://localhost:8000"):
+    """
+    测试模型状态API
+    
+    Args:
+        base_url: API基础URL
+    """
+    # 组合完整URL
+    url = f"{base_url}/api/status"
+    
+    logger.info(f"正在测试模型状态API: {url}")
+    
+    try:
+        # 发送GET请求
+        response = requests.get(url, timeout=10)
+        
+        # 检查响应状态
+        logger.info(f"状态码: {response.status_code}")
+        
+        if response.status_code == 200:
+            # 尝试解析JSON响应
+            try:
+                result = response.json()
+                
+                # 打印服务状态信息
+                logger.info(f"服务状态: {result.get('status', 'unknown')}")
+                logger.info(f"消息: {result.get('message', 'unknown')}")
+                logger.info(f"模型已加载: {result.get('model_loaded', False)}")
+                logger.info(f"GPU可用: {result.get('gpu_available', False)}")
+                
+                # 验证是否模型已加载
+                if result.get('model_loaded', False):
+                    logger.info("测试成功: 模型已加载")
+                    return True
+                else:
+                    logger.warning("测试失败: 模型未加载")
+                    return False
+                
+            except json.JSONDecodeError as e:
+                logger.error(f"解析响应时出错: {str(e)}")
+                logger.error(f"原始响应内容:\n{response.text}")
+                return False
+        else:
+            logger.error(f"请求失败，状态码: {response.status_code}")
+            logger.error(f"响应内容: {response.text}")
+            return False
+        
+    except requests.RequestException as e:
+        logger.exception(f"请求异常: {str(e)}")
+        return False
+
+if __name__ == "__main__":
+    # 从命令行参数获取URL或使用默认值
+    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8000"
+    success = test_model_status(base_url)
+    
+    # 设置退出码
+    sys.exit(0 if success else 1) 
+ 
\ No newline at end of file
diff --git a/scripts/test_scripts/test_requirements.txt b/scripts/test_scripts/test_requirements.txt
new file mode 100644
index 0000000..ca321f3
--- /dev/null
+++ b/scripts/test_scripts/test_requirements.txt
@@ -0,0 +1,3 @@
+requests>=2.25.0
+websocket-client>=1.1.0
+pytest>=6.2.5 
\ No newline at end of file
diff --git a/scripts/test_scripts/test_search_api.py b/scripts/test_scripts/test_search_api.py
new file mode 100644
index 0000000..f2c8555
--- /dev/null
+++ b/scripts/test_scripts/test_search_api.py
@@ -0,0 +1,2 @@
+"""
+ 
\ No newline at end of file
diff --git a/scripts/test_scripts/test_websocket.py b/scripts/test_scripts/test_websocket.py
new file mode 100644
index 0000000..356f650
--- /dev/null
+++ b/scripts/test_scripts/test_websocket.py
@@ -0,0 +1,239 @@
+"""
+WebSocket接口测试模块
+
+此模块包含WebSocket接口的测试用例。
+"""
+import websocket
+import json
+import time
+import sys
+import threading
+import logging
+import ssl
+
+# 设置日志
+logging.basicConfig(
+    level=logging.INFO,
+    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
+)
+logger = logging.getLogger(__name__)
+
+# 全局变量用于接收消息
+received_messages = []
+connection_closed = False
+
+def on_message(ws, message):
+    """处理接收到的消息"""
+    global received_messages
+    logger.info(f"接收到消息: {message}")
+    try:
+        data = json.loads(message)
+        received_messages.append(data)
+    except json.JSONDecodeError:
+        logger.error(f"无法解析JSON消息: {message}")
+
+def on_error(ws, error):
+    """处理错误"""
+    logger.error(f"WebSocket错误: {error}")
+
+def on_close(ws, close_status_code, close_msg):
+    """处理连接关闭"""
+    global connection_closed
+    connection_closed = True
+    logger.info(f"WebSocket连接关闭: {close_status_code}, {close_msg}")
+
+def on_open(ws):
+    """处理连接打开"""
+    logger.info("WebSocket连接已打开")
+
+def test_chat_websocket(base_url="localhost:8000", timeout=30):
+    """
+    测试聊天WebSocket接口
+    
+    Args:
+        base_url: WebSocket服务器地址
+        timeout: 超时时间(秒)
+    """
+    global received_messages, connection_closed
+    received_messages = []
+    connection_closed = False
+    
+    # WebSocket URL
+    ws_url = f"ws://{base_url}/ws/chat/"
+    
+    logger.info(f"测试聊天WebSocket接口: {ws_url}")
+    
+    # 创建WebSocket连接
+    ws = websocket.WebSocketApp(
+        ws_url,
+        on_open=on_open,
+        on_message=on_message,
+        on_error=on_error,
+        on_close=on_close
+    )
+    
+    # 在后台线程中运行WebSocket连接
+    wst = threading.Thread(target=ws.run_forever, kwargs={"sslopt": {"cert_reqs": ssl.CERT_NONE}})
+    wst.daemon = True
+    wst.start()
+    
+    # 等待连接打开
+    time.sleep(2)
+    
+    try:
+        # 发送聊天消息
+        chat_message = {
+            "type": "message",
+            "message": {
+                "role": "user",
+                "content": "你好，这是一个测试消息。"
+            }
+        }
+        
+        logger.info(f"发送消息: {json.dumps(chat_message, ensure_ascii=False)}")
+        ws.send(json.dumps(chat_message))
+        
+        # 等待响应
+        start_time = time.time()
+        while len(received_messages) == 0:
+            time.sleep(0.5)
+            if time.time() - start_time > timeout:
+                logger.error(f"等待响应超时({timeout}秒)")
+                return False
+        
+        # 验证响应
+        if len(received_messages) > 0:
+            response = received_messages[0]
+            logger.info(f"收到有效响应: {json.dumps(response, ensure_ascii=False)}")
+            return True
+        else:
+            logger.error("未收到响应")
+            return False
+    
+    except Exception as e:
+        logger.exception(f"测试过程中出错: {str(e)}")
+        return False
+    
+    finally:
+        # 关闭WebSocket连接
+        ws.close()
+        
+        # 等待连接关闭
+        close_start_time = time.time()
+        while not connection_closed:
+            time.sleep(0.5)
+            if time.time() - close_start_time > 5:  # 最多等待5秒
+                logger.warning("WebSocket连接未正常关闭")
+                break
+
+def test_analyze_websocket(base_url="localhost:8000", timeout=30):
+    """
+    测试图像分析WebSocket接口
+    
+    Args:
+        base_url: WebSocket服务器地址
+        timeout: 超时时间(秒)
+    """
+    global received_messages, connection_closed
+    received_messages = []
+    connection_closed = False
+    
+    # WebSocket URL
+    ws_url = f"ws://{base_url}/ws/analyze/"
+    
+    logger.info(f"测试图像分析WebSocket接口: {ws_url}")
+    
+    # 创建WebSocket连接
+    ws = websocket.WebSocketApp(
+        ws_url,
+        on_open=on_open,
+        on_message=on_message,
+        on_error=on_error,
+        on_close=on_close
+    )
+    
+    # 在后台线程中运行WebSocket连接
+    wst = threading.Thread(target=ws.run_forever, kwargs={"sslopt": {"cert_reqs": ssl.CERT_NONE}})
+    wst.daemon = True
+    wst.start()
+    
+    # 等待连接打开
+    time.sleep(2)
+    
+    try:
+        # 准备一个简单的测试图像的base64编码
+        test_image_base64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
+        
+        # 发送图像分析请求
+        analyze_message = {
+            "type": "analyze",
+            "data": {
+                "image_base64": test_image_base64,
+                "query": "这是什么图片?"
+            }
+        }
+        
+        logger.info("发送图像分析请求...")
+        ws.send(json.dumps(analyze_message))
+        
+        # 等待响应
+        start_time = time.time()
+        while len(received_messages) == 0:
+            time.sleep(0.5)
+            if time.time() - start_time > timeout:
+                logger.error(f"等待响应超时({timeout}秒)")
+                return False
+        
+        # 验证响应
+        if len(received_messages) > 0:
+            response = received_messages[0]
+            logger.info(f"收到有效响应: {json.dumps(response, ensure_ascii=False)}")
+            return True
+        else:
+            logger.error("未收到响应")
+            return False
+    
+    except Exception as e:
+        logger.exception(f"测试过程中出错: {str(e)}")
+        return False
+    
+    finally:
+        # 关闭WebSocket连接
+        ws.close()
+        
+        # 等待连接关闭
+        close_start_time = time.time()
+        while not connection_closed:
+            time.sleep(0.5)
+            if time.time() - close_start_time > 5:  # 最多等待5秒
+                logger.warning("WebSocket连接未正常关闭")
+                break
+
+if __name__ == "__main__":
+    # 检查命令行参数
+    if len(sys.argv) > 1:
+        base_url = sys.argv[1]
+    else:
+        base_url = "localhost:8000"
+    
+    # 测试聊天WebSocket接口
+    logger.info("开始测试聊天WebSocket接口...")
+    chat_success = test_chat_websocket(base_url)
+    
+    # 测试图像分析WebSocket接口
+    logger.info("\n开始测试图像分析WebSocket接口...")
+    analyze_success = test_analyze_websocket(base_url)
+    
+    # 输出测试结果
+    if chat_success:
+        logger.info("聊天WebSocket接口测试成功")
+    else:
+        logger.error("聊天WebSocket接口测试失败")
+    
+    if analyze_success:
+        logger.info("图像分析WebSocket接口测试成功")
+    else:
+        logger.error("图像分析WebSocket接口测试失败")
+    
+    # 设置退出码
+    sys.exit(0 if chat_success and analyze_success else 1) 
\ No newline at end of file
-- 
2.49.0.windows.1

