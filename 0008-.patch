From f343db74898c065c291933b9ab1fbfde3945bd32 Mon Sep 17 00:00:00 2001
From: Design Helper Developer <user@example.com>
Date: Mon, 5 May 2025 00:09:20 +0800
Subject: [PATCH 8/9] =?UTF-8?q?=E8=A1=A5=E5=85=85=E5=90=91=E9=87=8F?=
 =?UTF-8?q?=E7=94=A8=E4=BE=8B?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 admin_system/api/tests.py           | 127 +++++++++++++++++-
 admin_system/vector_search/tests.py | 124 ++++++++++++++++-
 scripts/test_vector_chat.py         | 201 ++++++++++++++++++++++++++++
 3 files changed, 450 insertions(+), 2 deletions(-)
 create mode 100644 scripts/test_vector_chat.py

diff --git a/admin_system/api/tests.py b/admin_system/api/tests.py
index 3b0952e..952244d 100644
--- a/admin_system/api/tests.py
+++ b/admin_system/api/tests.py
@@ -6,6 +6,9 @@ API测试模块 - 测试API接口功能
 from django.test import TestCase, Client
 from django.urls import reverse
 import json
+from management.models import KnowledgeBase, KnowledgeChunk
+from knowledge_base.services import VectorService
+import pickle
 
 class ApiTest(TestCase):
     """API测试类"""
@@ -36,4 +39,126 @@ class ApiTest(TestCase):
         self.assertIn('count', data)
 
 # 注意：由于图像分析和聊天完成接口需要模型加载，
-# 这里不包含这些测试，应在实际部署环境中手动测试 
\ No newline at end of file
+# 这里不包含这些测试，应在实际部署环境中手动测试 
+
+class ApiVectorIntegrationTests(TestCase):
+    """API与向量检索集成测试"""
+    
+    def setUp(self):
+        """设置测试环境"""
+        self.client = Client()
+        
+        # 创建向量服务
+        self.vector_service = VectorService()
+        
+        # 创建测试知识库
+        self.kb1 = KnowledgeBase.objects.create(
+            name="测试知识库1",
+            description="测试用知识库",
+            content="北京是中国的首都，有着丰富的历史文化和现代化设施。天安门、故宫、长城等是著名的旅游景点。"
+        )
+        
+        self.kb2 = KnowledgeBase.objects.create(
+            name="测试知识库2",
+            description="测试用知识库",
+            content="上海是中国最大的城市和全球重要的金融中心。外滩、东方明珠、豫园是著名的旅游景点。"
+        )
+        
+        self.kb3 = KnowledgeBase.objects.create(
+            name="设计规范",
+            description="网页设计规范",
+            content="网页设计应遵循简洁、直观、一致的原则。色彩搭配要协调，布局要合理，交互要流畅。"
+        )
+        
+        # 为知识库创建分块
+        for kb in [self.kb1, self.kb2, self.kb3]:
+            chunk = KnowledgeChunk.objects.create(
+                knowledge_base=kb,
+                content=kb.content,
+                metadata={"source": kb.name}
+            )
+            
+            # 创建向量
+            vector = self.vector_service.create_embeddings([chunk.content])[0]
+            chunk.vector_data = pickle.dumps(vector)
+            chunk.is_indexed = True
+            chunk.save()
+            
+            # 更新知识库状态
+            kb.is_indexed = True
+            kb.save()
+    
+    def test_search_knowledge_base(self):
+        """测试知识库搜索API"""
+        search_url = reverse('search_knowledge_base')
+        
+        # 测试北京相关搜索
+        data = {
+            'query': '北京旅游景点',
+            'top_k': 1
+        }
+        
+        response = self.client.post(
+            search_url, 
+            json.dumps(data),
+            content_type='application/json'
+        )
+        
+        self.assertEqual(response.status_code, 200)
+        result = json.loads(response.content)
+        
+        # 验证结果包含北京相关内容
+        self.assertTrue(len(result['results']) > 0)
+        self.assertIn('北京', result['results'][0]['content'])
+        
+        # 测试设计相关搜索
+        data = {
+            'query': '网页设计原则',
+            'top_k': 1
+        }
+        
+        response = self.client.post(
+            search_url, 
+            json.dumps(data),
+            content_type='application/json'
+        )
+        
+        self.assertEqual(response.status_code, 200)
+        result = json.loads(response.content)
+        
+        # 验证结果包含设计相关内容
+        self.assertTrue(len(result['results']) > 0)
+        self.assertIn('设计', result['results'][0]['content'])
+    
+    def test_chat_with_knowledge_base(self):
+        """测试聊天API是否使用知识库"""
+        # 测试相关的查询应返回知识库中的信息
+        chat_url = reverse('chat_completions')
+        
+        # 构造一个查询北京的聊天请求
+        data = {
+            'messages': [
+                {'role': 'user', 'content': '北京有哪些著名的旅游景点？'}
+            ]
+        }
+        
+        response = self.client.post(
+            chat_url, 
+            json.dumps(data),
+            content_type='application/json'
+        )
+        
+        self.assertEqual(response.status_code, 200)
+        result = json.loads(response.content)
+        
+        # 验证模型回复中包含知识库中的相关信息
+        # 注意：这个测试依赖于模型的行为，可能需要调整
+        self.assertIn('choices', result)
+        self.assertTrue(len(result['choices']) > 0)
+        
+        content = result['choices'][0]['message']['content']
+        
+        # 验证回复中包含知识库中的关键信息
+        # 至少应该提到天安门、故宫或长城中的一个
+        mentioned_landmarks = any(landmark in content for landmark in ['天安门', '故宫', '长城'])
+        self.assertTrue(mentioned_landmarks, f"回复中未包含知识库中的地标信息: {content}") 
\ No newline at end of file
diff --git a/admin_system/vector_search/tests.py b/admin_system/vector_search/tests.py
index 7ce503c..6a9eaff 100644
--- a/admin_system/vector_search/tests.py
+++ b/admin_system/vector_search/tests.py
@@ -1,3 +1,125 @@
 from django.test import TestCase
+import numpy as np
+import os
+import json
+from django.conf import settings
+from .models import VectorIndex, DocumentVector
+from .utils import (
+    text_to_vector, 
+    create_vector_index, 
+    add_document_to_index, 
+    rebuild_vector_index,
+    vector_search
+)
 
-# Create your tests here.
+class VectorSearchTests(TestCase):
+    """向量搜索功能测试"""
+    
+    def setUp(self):
+        """设置测试环境"""
+        # 创建测试索引
+        self.index = create_vector_index("test_index", "测试索引")
+        
+        # 添加测试文档
+        self.doc1 = add_document_to_index(
+            index=self.index,
+            document_id="doc1",
+            text="北京是中国的首都，拥有悠久的历史和丰富的文化遗产。",
+            source="test",
+            metadata={"title": "北京简介"}
+        )
+        
+        self.doc2 = add_document_to_index(
+            index=self.index,
+            document_id="doc2",
+            text="上海是中国最大的城市，是重要的经济、金融、贸易和航运中心。",
+            source="test",
+            metadata={"title": "上海简介"}
+        )
+        
+        self.doc3 = add_document_to_index(
+            index=self.index,
+            document_id="doc3",
+            text="设计师需要注意网页的色彩搭配和布局结构，确保用户体验良好。",
+            source="test",
+            metadata={"title": "设计规范"}
+        )
+        
+        # 重建索引
+        rebuild_vector_index(self.index)
+    
+    def test_vector_index_creation(self):
+        """测试向量索引创建"""
+        self.assertEqual(self.index.name, "test_index")
+        self.assertEqual(self.index.description, "测试索引")
+        self.assertEqual(self.index.document_count, 3)
+        
+        # 检查索引文件是否存在
+        vector_file = self.index.get_vector_file_path()
+        metadata_file = self.index.get_metadata_file_path()
+        
+        self.assertTrue(os.path.exists(vector_file))
+        self.assertTrue(os.path.exists(metadata_file))
+        
+        # 检查元数据
+        with open(metadata_file, 'r') as f:
+            metadata = json.load(f)
+        
+        self.assertEqual(metadata["document_count"], 3)
+    
+    def test_vector_search(self):
+        """测试向量搜索功能"""
+        # 搜索关于城市的信息
+        results = vector_search(self.index, "中国城市", top_k=2)
+        
+        # 验证结果数量
+        self.assertEqual(len(results), 2)
+        
+        # 验证北京或上海在结果中
+        found_beijing = False
+        found_shanghai = False
+        
+        for result in results:
+            if "北京" in result["text"]:
+                found_beijing = True
+            if "上海" in result["text"]:
+                found_shanghai = True
+        
+        # 至少有一个城市应该被找到
+        self.assertTrue(found_beijing or found_shanghai)
+        
+        # 搜索设计相关内容
+        design_results = vector_search(self.index, "网页设计", top_k=1)
+        
+        # 验证找到了设计相关内容
+        self.assertEqual(len(design_results), 1)
+        self.assertIn("设计", design_results[0]["text"])
+    
+    def test_search_relevance(self):
+        """测试搜索结果的相关性"""
+        # 搜索北京相关内容
+        beijing_results = vector_search(self.index, "北京历史文化", top_k=3)
+        
+        # 验证最相关的结果是关于北京的
+        self.assertIn("北京", beijing_results[0]["text"])
+        
+        # 搜索上海相关内容
+        shanghai_results = vector_search(self.index, "上海经济金融", top_k=3)
+        
+        # 验证最相关的结果是关于上海的
+        self.assertIn("上海", shanghai_results[0]["text"])
+    
+    def tearDown(self):
+        """清理测试环境"""
+        # 删除测试索引文件
+        vector_file = self.index.get_vector_file_path()
+        metadata_file = self.index.get_metadata_file_path()
+        
+        if os.path.exists(vector_file):
+            os.remove(vector_file)
+        
+        if os.path.exists(metadata_file):
+            os.remove(metadata_file)
+        
+        # 删除测试数据
+        self.index.delete()
diff --git a/scripts/test_vector_chat.py b/scripts/test_vector_chat.py
new file mode 100644
index 0000000..522febb
--- /dev/null
+++ b/scripts/test_vector_chat.py
@@ -0,0 +1,201 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+"""
+聊天系统与知识库集成测试脚本
+
+此脚本用于验证聊天系统是否正确使用知识库和向量检索功能。
+"""
+import sys
+import os
+import json
+import requests
+import time
+from pprint import pprint
+
+# 设置项目根目录
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+sys.path.append(BASE_DIR)
+
+# API地址
+API_URL = "http://localhost:8000/api"  # 如果不是本地服务，请修改为实际API地址
+
+def test_knowledge_base_search():
+    """测试知识库搜索功能"""
+    print("\n=== 测试知识库搜索 ===")
+    
+    # 定义测试查询
+    test_queries = [
+        "北京有哪些著名的旅游景点？",
+        "上海的金融中心地位",
+        "网页设计的基本原则"
+    ]
+    
+    for query in test_queries:
+        print(f"\n正在搜索: '{query}'")
+        
+        try:
+            # 发送搜索请求
+            response = requests.post(
+                f"{API_URL}/search",
+                json={
+                    "query": query,
+                    "top_k": 2
+                }
+            )
+            
+            if response.status_code == 200:
+                result = response.json()
+                print(f"找到 {result['count']} 条结果:")
+                
+                for i, item in enumerate(result['results']):
+                    print(f"  {i+1}. {item['name']} (相似度: {item['similarity']:.2f})")
+                    print(f"     {item['content'][:100]}...")
+                
+                # 验证是否返回了结果
+                assert result['count'] > 0, "搜索未返回任何结果"
+                
+                # 验证结果是否相关
+                if "北京" in query:
+                    found_beijing = any("北京" in item['content'] for item in result['results'])
+                    assert found_beijing, "搜索北京但未找到相关内容"
+                    
+                elif "上海" in query:
+                    found_shanghai = any("上海" in item['content'] for item in result['results'])
+                    assert found_shanghai, "搜索上海但未找到相关内容"
+                    
+                elif "设计" in query:
+                    found_design = any("设计" in item['content'] for item in result['results'])
+                    assert found_design, "搜索设计但未找到相关内容"
+                
+                print("✓ 搜索测试通过")
+                
+            else:
+                print(f"× 请求失败: {response.status_code}")
+                print(response.text)
+                
+        except Exception as e:
+            print(f"× 测试出错: {str(e)}")
+
+def test_chat_with_knowledge():
+    """测试聊天系统是否使用知识库"""
+    print("\n=== 测试聊天系统与知识库集成 ===")
+    
+    # 定义测试对话
+    test_conversations = [
+        [
+            {"role": "user", "content": "北京有哪些著名的旅游景点？"}
+        ],
+        [
+            {"role": "user", "content": "上海是一个什么样的城市？"}
+        ],
+        [
+            {"role": "user", "content": "网页设计有哪些基本原则？"}
+        ]
+    ]
+    
+    for messages in test_conversations:
+        query = messages[0]['content']
+        print(f"\n测试对话: '{query}'")
+        
+        try:
+            # 先获取知识库搜索结果
+            kb_response = requests.post(
+                f"{API_URL}/search",
+                json={
+                    "query": query,
+                    "top_k": 2
+                }
+            )
+            
+            kb_result = kb_response.json() if kb_response.status_code == 200 else {"results": []}
+            
+            # 发送聊天请求
+            chat_response = requests.post(
+                f"{API_URL}/v1/chat/completions",
+                json={
+                    "messages": messages,
+                    "stream": False
+                }
+            )
+            
+            if chat_response.status_code == 200:
+                result = chat_response.json()
+                
+                if 'choices' in result and len(result['choices']) > 0:
+                    content = result['choices'][0]['message']['content']
+                    print("\n模型回复:")
+                    print(content)
+                    
+                    # 检查回复是否包含知识库中的信息
+                    knowledge_incorporated = False
+                    
+                    if kb_result['results']:
+                        # 从知识库结果中提取关键词
+                        key_phrases = []
+                        for item in kb_result['results']:
+                            # 简单拆分内容获取关键短语
+                            phrases = [p.strip() for p in item['content'].split('。') if len(p.strip()) > 3]
+                            key_phrases.extend(phrases[:2])  # 只取前两个短语
+                        
+                        # 检查回复中是否包含关键短语
+                        for phrase in key_phrases:
+                            if len(phrase) > 3 and phrase in content:
+                                knowledge_incorporated = True
+                                print(f"\n✓ 回复中包含知识库信息: '{phrase}'")
+                                break
+                    
+                    if not knowledge_incorporated:
+                        print("\n× 回复中未明确包含知识库信息")
+                        
+                        # 检查一些关键词
+                        if "北京" in query:
+                            landmarks = ["天安门", "故宫", "长城"]
+                            found = any(landmark in content for landmark in landmarks)
+                            if found:
+                                print(f"✓ 但包含了相关地标信息")
+                            
+                        elif "上海" in query:
+                            landmarks = ["外滩", "东方明珠", "豫园"]
+                            found = any(landmark in content for landmark in landmarks)
+                            if found:
+                                print(f"✓ 但包含了相关地标信息")
+                                
+                        elif "设计" in query:
+                            principles = ["简洁", "直观", "一致", "布局", "色彩"]
+                            found = any(principle in content for principle in principles)
+                            if found:
+                                print(f"✓ 但包含了相关设计原则")
+                else:
+                    print("× 响应不包含有效回复")
+            else:
+                print(f"× 请求失败: {chat_response.status_code}")
+                print(chat_response.text)
+                
+        except Exception as e:
+            print(f"× 测试出错: {str(e)}")
+        
+        time.sleep(1)  # 避免频繁请求
+
+def main():
+    """主函数"""
+    print("开始测试聊天系统与知识库集成...")
+    
+    # 测试服务是否在线
+    try:
+        status_response = requests.get(f"{API_URL}/status")
+        if status_response.status_code != 200:
+            print(f"× 服务状态检查失败: {status_response.status_code}")
+            return
+    except Exception as e:
+        print(f"× 无法连接到API服务: {str(e)}")
+        print(f"请确保服务已启动，并可通过 {API_URL} 访问")
+        return
+    
+    # 运行测试
+    test_knowledge_base_search()
+    test_chat_with_knowledge()
+    
+    print("\n测试完成!")
+
+if __name__ == "__main__":
+    main() 
\ No newline at end of file
-- 
2.49.0.windows.1

